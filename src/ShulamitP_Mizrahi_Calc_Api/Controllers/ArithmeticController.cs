/*
 * Mizrahi Arithmetic API
 *
 * EST API that performs basic arithmetic operations. Implemented by Shulamit Petranker for Matrix/BM assignment.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ShulamitP_Mizrahi_Calc_Api.Attributes;
using ShulamitP_Mizrahi_Calc_Api.Security;
using Microsoft.AspNetCore.Authorization;
using ShulamitP_Mizrahi_Calc_Api.Models;
using System.Threading.Tasks;
using ShulamitP_Mizrahi_Calc_Api.Handlers.Arithmetic;
using ShulamitP_Mizrahi_Calc_Api.Dtos;
using Microsoft.Extensions.Logging;

namespace ShulamitP_Mizrahi_Calc_Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArithmeticController : ControllerBase
    {
        private readonly IArithmeticHandler _arithmeticHandler;
        private readonly ILogger<ArithmeticController> _logger;

        public ArithmeticController(IArithmeticHandler arithmeticHandler, ILogger<ArithmeticController> logger)
        {
            _arithmeticHandler = arithmeticHandler;
            _logger = logger;
        }
        /// <summary>
        /// Perform an arithmetic operation on two numbers
        /// </summary>
        /// <remarks>Sends two numbers in the body and an operation in the header, returns the result.</remarks>
        /// <param name="body"></param>
        /// <param name="xOperation">The arithmetic operation to perform</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid request or calculation error</response>
        /// <response code="401">Unauthorized – missing or invalid JWT token</response>
        [HttpPost]
        [Route("/test-436/ShulamitP-Mizrahi-Calc-Api/1.0.0/api/arithmetic")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("Calculate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculationResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid request or calculation error")]
        [SwaggerResponse(statusCode: 401, description: "Unauthorized – missing or invalid JWT token")]
        public virtual IActionResult Calculate([FromBody]CalculationRequest body, [FromHeader][Required()]OperationType xOperation)
        {
            _logger.LogInformation("--- Start Calculate ---");
            try
            {
                var calcDto = new CalculateDto(body, xOperation);

                var result = _arithmeticHandler.Calculate(calcDto);

                return Ok(result);
            }
            catch (ArgumentException ex)
            {
                _logger.LogError($@"ArgumentException ex = {ex.Message}");
                return BadRequest(new { error = ex.Message });
            }
            catch (InvalidOperationException ex)
            {
                _logger.LogError($@"InvalidOperationException ex = {ex.Message}");
                return new ObjectResult(new { error = ex.Message }) { StatusCode = 400 };
            }
            catch (Exception ex)
            {
                _logger.LogError("An unexpected error occurred.");
                return StatusCode(500, new { error = "An unexpected error occurred." });
            }
            finally
            {
                _logger.LogInformation("--- Finish Calculate ---");
            }
        }
    }
}
